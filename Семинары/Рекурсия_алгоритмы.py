# Задача №31. Решение в группах
# Последовательностью Фибоначчи называется
# последовательность чисел a0
# , a1
# , ..., an
# , ..., где
# a0
#  = 0, a1
#  = 1, ak
#  = ak-1 + ak-2 (k > 1).
# Требуется найти N-е число Фибоначчи
# Input: 7
# Output: 21
# Задание необходимо решать через рекурсию

'''''''''''''''
def fibonaci(n):
    if n <= 0:
        return 1
    else:
        return fibonaci(n - 1) + fibonaci(n - 2)
print(fibonaci(5))

# spisok = []
# for i in range(1, 15):
#     spisok.append(fib(i))
# print(*spisok) - выписываем все значения рекурсии


# как работает рекурсия
# n = 5
# f4 + f3
# f2 + f1
# f0=1 + f-1=1
# 1



#################################################################

# Задача №33. Решение в группах
# Хакер Василий получил доступ к классному журналу и
# хочет заменить все свои минимальные оценки на
# максимальные. Напишите программу, которая
# заменяет оценки Василия, но наоборот: все
# максимальные – на минимальные.
# Input: 5 -> 1 3 3 3 4
# Output: 1 3 3 3 1

a = [1, 3, 3, 3, 4]

max1 = max(a) # функция нахождения максимального числа
min1 = min(a) # функция нахожд миним числа
for i in a:
    if a[i] == max1:
        a[i] = min1
print(*a)



#####################################################################
# Задача №35. Решение в группах
# Напишите функцию, которая принимает одно число и
# проверяет, является ли оно простым
# Напоминание: Простое число - это число, которое
# имеет 2 делителя: 1 и n(само число)
# Input: 5
# Output: yes

# n = int(input('Введите число: '))
# if n // 1 == n and n // n == 1 and n // 2 != n/2:
#     print('yes')
# else:
#     print('no') # решение без функции, мое

########
# Через функцию
def prostoe_chislo(n):
    for i in range(2, n):
        if n % i == 0:
            return False
    return True

n = int(input('Введите число: '))
print('Yes' if prostoe_chislo(n) else 'No')

'''''''''

#############################################################
# Задача №37. Решение в группах

# Дано натуральное число N и
# последовательность из N элементов.
# Требуется вывести эту последовательность в
# обратном порядке.
# Примечание. В программе запрещается
# объявлять массивы и использовать циклы
# (даже для ввода и вывода).
# Input: 2 -> 3 4
# Output: 4 3

def reverse(n):
    str1 = input() # задаем, сколько всего будет элементов в нашей строке
    if n == 1:
        return str1 # если n = 1, он возвращает строку
    return reverse(n - 1) + ' ' + str1 # если нет, то переворачивает с помощью функции reverse

n = int(input())
print(reverse(n))


