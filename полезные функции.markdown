## Функция *.count()*

Метод count () в Python вычисляет, сколько раз конкретное значение появляется в строке
или списке в Python. Count () принимает один аргумент: значение, которое вы хотите найти
в строке или списке. Когда count () используется со строкой, он будет искать подстроку
в строке большего размера. Затем count () вернет то количество раз, которое substring встречается
в строке.

>print(coins.count(0) if coins.count(0) < coins.count(1) else coins.count(1))

## Функция *set*

Функция set разбивает строку на символы, а из символов формирует множество. Мы видим, что символы на выходе расположились в случайном порядке и убрались дубли (буква о). Обратите внимание, что строка заключена в круглые скобки. Вспоминаем, что после функции всегда идут круглые скобки.
>d = set ('множество')
>
>print (d) {' о', 'ж', 'т', 'н', 'с', 'м', 'е', 'в'}.

## Функция map()

`map` - встроенная функция в python, которая принимает в себя функцию и список/коллекцию в качестве аргументов. Она применяет переданную функцию к каждому элементу списка/коллекции и возвращает результат каждой операции. Например:

> def square(x):
> return x**2
> collection = [1, 2, 3]
> result = map(square, collection)
* подробнее тут -> https://pythonist.ru/python-map-znakomstvo/

## Функция math

Вызывает все, что связано с математическими действиями, например:

>from math import sqrt
>
>z = sqrt( (s/2)**2 - p )
>
>print( int( s/2 - z ), int( s/2 + z ) )

## Функция split()

разделяет числа, строки и тд, превращает их в список, в скобках указывается разделитель, может быть любым

> print(list_1.split())

## Функция append()

Добавляет значения в конец списка?, добавляет по одному элементу

> list_1.append(8)

## Функция reverse()

Метод *reverse()* применяется к изменяемым последовательностям, таким как списки. Он изменяет порядок элементов списка на обратный. reverse() является методом списка, а не отдельной функцией, и не возвращает новый список, а изменяет существующий список «на месте».

>my_list = [1, 2, 3, 4, 5]
>my_list.reverse()
>print(my_list) # [5, 4, 3, 2, 1]

## Функция reversed()

Функция *reversed()* применяется ко всем последовательностям, таким как строки, списки, кортежи и диапазоны (ranges). Она возвращает обратный итератор, а не изменяет исходную последовательность. Чтобы получить обратную последовательность в виде нового списка или строки, нужно сконвертировать итератор в соответствующий тип данных.

>my_list = [1, 2, 3, 4, 5]
>reversed_list = list(reversed(my_list))
>print(reversed_list)


## Функция рандомного заполнения списка

>import random
>a = int(input())
>b = int(input())
>lst_1 = [0]*a
>lst_2 = [0]*b
>for i in range(a):
>    lst_1[i] = random.randint(1, 10)
>for i in range(b):
>    lst_2[i] = random.randint(1, 10)


## Функция Counter()

Класс Counter в Python является частью модуля Collections. Counter является подклассом Dictionary и используется для отслеживания элементов и их количества.
Источник: https://pythonim.ru/osnovy/metod-counter-v-python

>from collections import Counter
>
>a = [1, 2, 3, 2, 3]
>counter = Counter(a)
>print(counter)